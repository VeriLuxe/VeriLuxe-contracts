name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-contracts:
    name: Deploy Smart Contracts
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            contracts/target
          key: ${{ runner.os }}-cargo-contracts-${{ hashFiles('contracts/**/Cargo.lock') }}

      - name: Install Soroban CLI
        run: |
          cargo install --locked soroban-cli --features opt
          soroban --version

      - name: Configure Soroban network
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            soroban network add mainnet \
              --rpc-url https://horizon.stellar.org \
              --network-passphrase "Public Global Stellar Network ; September 2015"
            echo "NETWORK=mainnet" >> $GITHUB_ENV
          else
            soroban network add testnet \
              --rpc-url https://soroban-testnet.stellar.org \
              --network-passphrase "Test SDF Network ; September 2015"
            echo "NETWORK=testnet" >> $GITHUB_ENV
          fi

      - name: Import deployment key
        run: |
          echo "${{ secrets.STELLAR_SECRET_KEY }}" | soroban keys add deployer --stdin

      - name: Build and optimize contract
        run: |
          cd contracts/contracts
          cargo build --target wasm32-unknown-unknown --release
          soroban contract optimize --wasm target/wasm32-unknown-unknown/release/veriluxe_contracts.wasm

      - name: Deploy contract
        id: deploy
        run: |
          cd contracts/contracts
          CONTRACT_ID=$(soroban contract deploy \
            --wasm target/wasm32-unknown-unknown/release/veriluxe_contracts.wasm \
            --source deployer \
            --network ${{ env.NETWORK }})
          echo "contract_id=$CONTRACT_ID" >> $GITHUB_OUTPUT
          echo "Contract deployed with ID: $CONTRACT_ID"

      - name: Initialize contract
        run: |
          cd contracts/contracts
          soroban contract invoke \
            --id ${{ steps.deploy.outputs.contract_id }} \
            --source deployer \
            --network ${{ env.NETWORK }} \
            -- initialize \
            --admin ${{ secrets.ADMIN_PUBLIC_KEY }}

      - name: Save deployment info
        run: |
          mkdir -p deployment-info
          cat > deployment-info/contract-deployment.json << EOF
          {
            "contract_id": "${{ steps.deploy.outputs.contract_id }}",
            "network": "${{ env.NETWORK }}",
            "deployed_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "git_commit": "${{ github.sha }}",
            "deployer": "${{ secrets.ADMIN_PUBLIC_KEY }}",
            "environment": "${{ github.event.inputs.environment || 'production' }}"
          }
          EOF

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v3
        with:
          name: deployment-info
          path: deployment-info/
          retention-days: 365

  deploy-api:
    name: Deploy API
    runs-on: ubuntu-latest
    needs: deploy-contracts
    environment: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./contracts/api
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            # Stop existing container
            docker stop veriluxe-api || true
            docker rm veriluxe-api || true
            
            # Pull latest image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:latest
            
            # Start new container
            docker run -d \
              --name veriluxe-api \
              --restart unless-stopped \
              -p 3000:3000 \
              -e SOROBAN_RPC_URL="${{ secrets.SOROBAN_RPC_URL }}" \
              -e SOROBAN_NETWORK_PASSPHRASE="${{ secrets.SOROBAN_NETWORK_PASSPHRASE }}" \
              -e FASHION_AUTH_CONTRACT_ID="${{ needs.deploy-contracts.outputs.contract_id }}" \
              -e ADMIN_SECRET_KEY="${{ secrets.ADMIN_SECRET_KEY }}" \
              -e API_HOST="0.0.0.0" \
              -e API_PORT="3000" \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:latest

      - name: Health check
        run: |
          sleep 30
          curl -f ${{ secrets.API_URL }}/health || exit 1

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-contracts, deploy-api]
    if: always()
    steps:
      - name: Download deployment artifacts
        uses: actions/download-artifact@v3
        with:
          name: deployment-info

      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          username: GitHub Actions
          title: VeriLuxe Deployment
          text: |
            Environment: ${{ github.event.inputs.environment || 'production' }}
            Contract ID: ${{ needs.deploy-contracts.outputs.contract_id }}
            Commit: ${{ github.sha }}
            Status: ${{ job.status }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}